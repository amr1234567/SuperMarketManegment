@inject IGetProductByIdUseCase GetProduct
@inject ISellProductUseCase SellProduct
@inject IRecordTransactionUseCase RecordTransaction

@if(productToSell != null)
{
    <EditForm Model="productToSell" OnValidSubmit="onsubmit" class="form-d-inline mb-4">
        <ValidationSummary></ValidationSummary>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="input-group-text mb-3 row">
            <label for="name" class="col-3">Name</label>
            <input type="text" class="ms-2 col-5" id="name" readonly value="@productToSell.Name" />
        </div>
        <div class="input-group-text mb-3 row">
            <label for="price" class="col-3">Price</label>
            <input type="text" class="ms-2 col-5" id="price" readonly value="@productToSell.Price" />
        </div>
        <div class="input-group-text row mb-3">
            <label for="qty" class="col-3"> Quantity </label>
            <InputNumber id="qty" class="form-control col-5" @bind-Value="productToSell.Quantity" />
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mb-3">@errorMessage</div>
        }
        <button type="submit" class="btn btn-success">Sell</button>
    </EditForm>
    
}

@code {
    private Product productToSell;

    private string errorMessage { get; set; } = string.Empty;

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public string CashierName { set; get; } = string.Empty;

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(SelectedProduct != null)
        {
            productToSell = new Product()
                {
                    CategoryId = SelectedProduct.CategoryId,
                    Id = SelectedProduct.Id,
                    Name = SelectedProduct.Name,
                    Price = SelectedProduct.Price,
                    Quantity = 0
                };
        }
        else
        {
            productToSell = null;
        }
    }

    private void onsubmit()
    {
        var prod = GetProduct.Execute(productToSell.Id);
        if (prod.Quantity >= productToSell.Quantity)
        {
            if (string.IsNullOrEmpty(CashierName))
                    errorMessage ="Cashier Name must have a value";
            else if (productToSell.Quantity <= 0)
                errorMessage = " The Quantity must be greater than 0";
            else
            {
                    errorMessage = string.Empty;
                    SellProduct.Execute(productToSell.Id, productToSell.Quantity);
                    RecordTransaction.Execute(CashierName, productToSell.Id, SelectedProduct.Quantity ,productToSell.Quantity);
                    OnProductSold.InvokeAsync(productToSell);
            }
        }
        else errorMessage = $"{productToSell.Name} doesn't have enough Quantity. please choose less than {SelectedProduct.Quantity}.";
    }
}
