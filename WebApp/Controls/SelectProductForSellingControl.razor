@inject IViewCategoriesUseCase Categories
@inject IGetProductsByCategoryIdUseCase ProductsInCategory

<select @bind="CategoryId"  class="form-select">
    <option value="0"></option>
    @foreach (var cat in _categories)
    {
        <option value="@cat.Id">@cat.Name</option>
    }
</select>
<br/>
@if(products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                @if (product.Id == selectedProductId)
                {
                    color = "background-color:antiquewhite";
                }
                else
                {
                    color = "";
                }
                <tr @onclick="()=> OnSelect(product)" style="@(color);cursor:pointer;">
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public EventCallback<Product> onProductSelect { get; set; }

    private int selectedProductId { get; set; } = 0;
    private string  color;

    private IEnumerable<Product> products;
    private IEnumerable<Category> _categories;
    private int categoryId;
    private int CategoryId
    {
        set
        {
            categoryId = value;
            products = ProductsInCategory.Execute(value).ToList();
            OnSelect(null);
            StateHasChanged();
        }
        get
        {
            return categoryId;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _categories = Categories.Execute().ToList();
    }

    private void OnSelect(Product product)
    {
        onProductSelect.InvokeAsync(product);
        if (product != null) selectedProductId = product.Id;
        else selectedProductId = 0;
    }
}
